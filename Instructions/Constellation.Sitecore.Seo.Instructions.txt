Instructions
============

Sitemap.xml support
------------------
You must set ASP.NET to process all requests.
You must register the "Constellation.Sitecore.HttpHandlers.SitemapXmlHandler, Constellation.Sitecore.Seo" to handle requests for "sitemap.xml".
An example config file is provided for the required Web.Config settings (aside from the handler assignment)
You will likely want to create your own SitemapNode class and possibly your own Crawler class. These must decend from ISitemapNode and ICrawler.
For multiple site crawler support, add sitemapCrawlerType="my.crawler.type.name, assembly" to your Sitecore site definitions. If no site-specific crawler
is defined, the one in the config file will be used. To specify a unique Sitemap Node type for each site, add a parameter named sitemapNodeType to your Sitecore
site definitions. if no site-specific node type is found, the one in the config file will be used.


Robots.txt support
------------------
You must set ASP.NET to process all requests.
You must register the "Constellation.Sitecore.HttpHandlers.RobotsTxtHandler, Constellation.Sitecore.Seo" to handle requests for "robots.txt".
An example config file is provided for the required Web.Config settings (aside from the handler assignment)
This is a very simple handler. Assuming you're doing hostname routing, all hostnames will use the same robots.txt rules.


Language Resolution
-------------------

Replace the default Sitecore LanguageResolver with "Constellation.Sitecore.Pipelines.HttpRequest.LanguageResolver, Constellation.Sitecore.Seo"
Please see /App_Config/Include/HttpRequestPipeline.config.Example. Add "supportedLanguages" attributes to site definitions.
Please see /App_Config/Include/Sites.SupportedLanguages.config.Example.


Setting up Static Hostnames for Style Assets
--------------------------------------------

You can get significantly improved performance out of your page loads if the static assets for a site (CSS, Javascript and sprite files) are located
on a different hostname from your Sitecore content. To implement this, utilize the ASP.NET WebForms compatible controls in the Renderings namespace:
* Constellation.Sitecore.Renderings.StaticCssReference
* Constellation.Sitecore.Renderings.StaticImage
* Constellation.Sitecore.Renderings.StaticJavascriptReference

These controls replace basic <link />, <img /> and <script /> tags, allowing you to supply relative paths during development, automatically switching
to absolute paths if the Item's context Site definition includes the "staticHostName" attribute.
Please see /App_Config/Include/Sites.StaticHostNameSupport.config.Example.


Setting Url-Friendly Names on Sitecore Items
--------------------------------------------
Install a new custom rule action using "Constellation.Sitecore.Rules.Actions.SetUrlFriendlyName, Constellation.Sitecore.Seo"

In the Rule Text field, use the following text:
"Set URL Friendly Name. Replace Diacritics [ReplaceDiacritics,,,true or false], Clear Display Name [ClearDisplayName,,,true or false], Remove the following illegal characters [IllegalCharacterRegEx,,,regex], Treat spaces as [SpaceHandling,,,UseDash or RemoveSpaces], Set case to [ChangeCase,,,ForceLowercase or AsIs]."

Create a new Item Saved rule that implements the action. I recommend limiting use to Items that will be used to create the standard Sitecore URLs. - Usually Pages and Folders.

IMPORTANT: Ensure your new Item Saved rule avoids "stock" Sitecore items such as sitecore/content, sitecore/media library, and sitecore/system. You can render your system unusable if these items are accidentally renamed.


404 Page Handling
-----------------
Install the "Constellation.Sitecore.Pipelines.HttpRequest.PageNotFoundResolver, Constellation.Sitecore.Seo" pipeline handler after your ItemResolver
in the Sitecore HttpRequest pipeline. Please see /App_Config/Include/HttpRequestPipeline.config.Example.

In the instance where a URL represents an Item, but the Item does not exist,
this pipeline handler will route the user to an Item defined in the content tree specifically
to provide content around this condition. This library will also set the Response header
so that search engines won't index the page and remove the URL from their collection.

Getting this to work can be a bit tricky. Follow all steps below carefully.

Step 1: 
Ensure you've got an Item to handle the 404 in your site. Typically it would be named
/not-found or /not-found.aspx. If you have more than one site, you need one on each site, 
since this handler can fire for all sites.

Step 2: 
Create a Rendering (WebControl type) named "Not Found". Use the following WebControl:
Constellation.Sitecore.Renderings.HttpResponsesNotFound, Constellation.Sitecore.Seo
This control is necessary to set the 404 response code, which must be set during the rendering of the handling page.

Step 3: 
Ensure each of your 404 pages has the "Not Found" rendering installed somewhere
near the top of the Presentation Details. It doesn't matter where it goes. 
I put it near the top so it's easy to spot when looking at the list of included Renderings.

Step 4: 
Web.Config changes (there are quite a few of them)

	4.A: 
	Install the following Processor in the HttpRequestBegin pipeline immediately after ItemResolver.
		<processor type="Constellation.Sitecore.Pipelines.HttpRequest.PageNotFoundResolver, Constellation.Sitecore.Seo" />

	4.B: 
	Change the ItemNotFoundUrl setting value to match the root-relative path to your not-found item, 
		ex: /not-found

	4.C: 
	Change the LinkItemNotFoundUrl setting value to match the root-relative path to your not-found item.
		ex: /not-found

	4.D:
	In the "sites" section of your configuration file, for each site in your installation, add an 
	attribute named "notFoundPageItemPath" with the site-relative path
	to the appropriate Item to handle the 404 condition. 
	Please see /App_Config/Include/Sites.404Support.config.Example

	4.E: 
	Adjust your customErrors element to include a specific path for 404 errors, 
	referencing the root-relative path to your not-found page.
		ex: 
		<customErrors mode="RemoteOnly">
			<error statusCode="404" redirect="/not-found"/>
		</customErrors>

	Alternately, set the redirect to "/default.aspx" which will cause IIS to shunt to Sitecore.

	4.F: To preserve the URL in the browser's location bar, tell Sitecore to shunt server-side errors 
	through Server.Transfer rather than Response.Redirect.
	This is done by setting the "RequestErrors.UseServerSideRedirect" setting's value to "true".

	Server Meltdown: Particularly relevant in multi-site installations, the target page for the 404s must exist, 
	and must be published, or you may experience a recursive loop condition.

Expected Behavior: 

* The URL displayed in the browser will be different for sites running in classic mode. 
* Server.Transfer doesn't seem to work correctly.
* If you set ErrorMode to RemoteOnly, you may see the yellow 404 page when debugging locally.


